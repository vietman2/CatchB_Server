name: Tests (Coveralls)

on:
  push:
    branches: [ "dev" ]
  pull_request:
    branches: [ "dev" ]
    types: [opened, synchronize, reopened]

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      USER_MANAGEMENT_SECRET_KEY: ${{ secrets.USER_MANAGEMENT_SECRET_KEY }}
      PAYMENTS_SECRET_KEY: ${{ secrets.PAYMENTS_SECRET_KEY }}
      PRODUCTS_SECRET_KEY: ${{ secrets.PRODUCTS_SECRET_KEY }}
      COMMUNITY_SECRET_KEY: ${{ secrets.COMMUNITY_SECRET_KEY }}
      CALENDAR_SECRET_KEY: ${{ secrets.CALENDAR_SECRET_KEY }}
      API_GATEWAY_SECRET_KEY: ${{ secrets.API_GATEWAY_SECRET_KEY }}
      API_GATEWAY_PRIVATE_KEY: ${{ secrets.API_GATEWAY_PRIVATE_KEY }}
      PRODUCTS_DB_NAME: ${{ secrets.PRODUCTS_DB_NAME }}
      COMMUNITY_DB_NAME: ${{ secrets.COMMUNITY_DB_NAME }}
      DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
      DB_USER: ${{ secrets.DB_USER }}
      RABBITMQ_USER: ${{ secrets.RABBITMQ_USER }}
      RABBITMQ_PASSWORD: ${{ secrets.RABBITMQ_PASSWORD }}
      NAVER_API_KEY: ${{ secrets.NAVER_API_KEY }}
      NAVER_API_KEY_ID: ${{ secrets.NAVER_API_KEY_ID }}
    strategy:
      max-parallel: 4
      matrix:
        python-version: [3.9]
    services:
      postgres_products:
        image: postgres:14
        env:
          POSTGRES_USER: ${{ secrets.DB_USER }}
          POSTGRES_PASSWORD: ${{ secrets.DB_PASSWORD }}
          POSTGRES_DB: ${{ secrets.PRODUCTS_DB_NAME }}
        ports:
          - 5432:5432
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5

      postgres_community:
        image: postgres:14
        env:
          POSTGRES_USER: ${{ secrets.DB_USER }}
          POSTGRES_PASSWORD: ${{ secrets.DB_PASSWORD }}
          POSTGRES_DB: ${{ secrets.COMMUNITY_DB_NAME }}
        ports:
          - 5433:5432
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5

      rabbitmq:
        image: rabbitmq:3.9
        env:
          RABBITMQ_DEFAULT_USER: ${{ secrets.RABBITMQ_USER }}
          RABBITMQ_DEFAULT_PASS: ${{ secrets.RABBITMQ_PASSWORD }}
        ports:
          - 5672:5672
        options: --health-cmd "rabbitmq-diagnostics -q check_running"

    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v3
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        sudo apt-get install graphviz graphviz-dev
        sudo apt-get install lcov
        pip install -r requirements.txt

    - name: Setup Django Database Config
      run: |
        echo "DATABASE_URL=postgres://${{ secrets.DB_USER }}:${{ secrets.DB_PASSWORD }}@postgres:5432/${{ secrets.PRODUCTS_DB_NAME }}" >> .env
        echo "DATABASE_URL=postgres://${{ secrets.DB_USER }}:${{ secrets.DB_PASSWORD }}@postgres:5432/${{ secrets.COMMUNITY_DB_NAME }}" >> .env

    - name: Run user_management tests
      run: |
        cd user_management_service
        coverage run --source='.' manage.py test
        coverage lcov -o user_management_coverage.lcov
        cd ..

    - name: Run products tests
      run: |
        cd products_service
        coverage run --source='.' manage.py test
        coverage lcov -o products_coverage.lcov
        cd ..

    - name: Run payments tests
      run: |
        cd payments_service
        coverage run --source='.' manage.py test
        coverage lcov -o payments_coverage.lcov
        cd ..

    - name: Run community tests
      run: |
        cd community_service
        coverage run --source='.' manage.py test
        coverage lcov -o community_coverage.lcov
        cd ..

    - name: Run calendar tests
      run: |
        cd calendar_service
        coverage run --source='.' manage.py test
        coverage lcov -o calendar_coverage.lcov
        cd ..

    - name: Run api gateway tests
      run: |
        cd api_gateway
        coverage run --source='.' manage.py test
        coverage lcov -o api_gateway_coverage.lcov
        cd ..

    - name: Upload coverage to Coveralls
      uses: coverallsapp/github-action@v2.2.3
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        files: user_management_service/user_management_coverage.lcov products_service/products_coverage.lcov community_service/community_coverage.lcov
        flag-name: coverage
